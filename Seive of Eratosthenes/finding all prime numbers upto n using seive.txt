#include <iostream>
#include <bits/stdc++.h>
using namespace std;

//TO FIND ALL PRIME NUMBERS UPTO N USING SEIVE OF ERATOSTHENES 

/*
here i would only go upto sqrt(n) because only then we would be able to makr any multiple of i
for example if i=2, then we could mark its multiples upto n=30, because its multiple exist which are <=30
and if i=29, which is greater than sqrt of 30, it has no multiples <=30
*/

vector<int> primes; //list of all prime numbers upto n

void print_vector(vector<int> a)
{
    for(int i=0;i<a.size();i++)
    cout<<a[i]<<" ";
    cout<<endl;
}

void find_primes(int n)
{
    vector<bool> is_prime(n+5,true); //could be declared globally according to need 
    for(int i=2;i<=sqrt(n);i++)
    {
        if(is_prime[i]==true) //then all multiples of i would be non prime
        {
            for(int j=i*i;j<=n;j+=i) //jumps of i
            is_prime[j]=false;
        }
    }
    
    //now you can print the prime numbers or store them in a vector using is_prime vector
    //storing in list
    for(int i=2;i<=n;i++)
    if(is_prime[i]==true) primes.push_back(i);
}

int main()
{
    int n; cin>>n;
    find_primes(n);
    //print_vector(primes);

    return(0);
}
