#include <bits/stdc++.h>
using namespace std;
#define fastio()                      \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL);
#define lli long long int
#define ll long long
#define pii pair<int,int>
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<ll>
#define vvl vector<vl> 

/*

Problem link: https://www.spoj.com/problems/SEQ/

take care of somethings:

-> value of mod
-> reversing the c-vector is required or not
-> nth term is 1 based or 0 based, if 0-based then remove n--

Proceedure:
-> check for n and k
-> generate the transition matrx
-> find the power
-> exponentiate the transition matrix to that power
-> calculate the nth term

*/

ll mod=1e9;

ll mod_add(ll x,ll y)
{
    return ((x%mod)+(y%mod))%mod;
}

ll mod_mul(ll x,ll y)
{
    return ((x%mod)*(y%mod))%mod;
}

vvl mat_mul(vvl a,vvl b)
{
    int n=a.size();
    vvl ans(n,vl(n));
    
    for(int i=0;i<n;i++)
    for(int j=0;j<n;j++)
    for(int k=0;k<n;k++)
    ans[i][j]=mod_add(ans[i][j],mod_mul(a[i][k],b[k][j]));
    
    return ans;
}

// exponentiate the square matrix to the power p
vvl mat_expo(vvl base,int p)
{
    int n=base.size();
    vvl res(n,vl(n,0)); // Identity matrix
    for(int i=0;i<n;i++) res[i][i]=1;
    
    while(p)
    {
        if(p&1) { res=mat_mul(res,base); p--; }
        else { base=mat_mul(base,base); p/=2; }
    }
    
    return res;
}

void solve()
{
    int k; cin>>k; 
    vl b(k),c(k);
    for(int i=0;i<k;i++) cin>>b[i];
    for(int i=0;i<k;i++) cin>>c[i];
    reverse(c.begin(),c.end());
    
    int n; cin>>n; n--; 
    
    if(n<=k-1) 
    {
        cout<<b[n]<<'\n'; 
        return;
    }
    
    vvl tm(k,vl(k,0));
    for(int i=0;i<k-1;i++) tm[i+1][i]=1;
    for(int i=0;i<k;i++) tm[i][k-1]=c[i];
    
    int p=n-k+1;
    
    vvl res=mat_expo(tm,p);
    
    ll ans=0;
    for(int i=0;i<k;i++)
    ans=mod_add(ans,mod_mul(b[i],res[i][k-1]));
    
    cout<<ans<<'\n';
    
    return;
}

int main()
{
    fastio();
    int t=1;
     cin>>t;
    while(t--) solve();

    return 0;
}
