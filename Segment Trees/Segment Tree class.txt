#include <bits/stdc++.h>
using namespace std;
#define fastio()                      \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL);
#define lli long long int
#define ll long long
#define pii pair<int,int>

/*
test case to test:

6
1 3 2 3 4 5
4
13 4 2 9
3
1 1 4 2 3
2 1 2 1
1 2 4 1 2

*/

int INF=1e9+1000;

class SGTree 
{
    vector<int> seg;
    public:
    
    SGTree(int n)
    {
        int M=4*n+1;
        seg.resize(M);
    }
    
    void build(int idx,int low,int high,int a[])
    {
        if(low==high)
        {
            seg[idx]=a[low];
            return;
        }
        
        int mid=(low+high)>>1;
        build(2*idx+1,low,mid,a);
        build(2*idx+2,mid+1,high,a);
        
        seg[idx]=min(seg[2*idx+1],seg[2*idx+2]);
    }
    
    int find(int idx,int low,int high,int l,int r)
    {
        if(r<low || high<l) return INF;
        else if(l<=low && high<=r) return seg[idx];
        
        int mid=(low+high)>>1;
        int res_l=find(2*idx+1,low,mid,l,r);
        int res_r=find(2*idx+2,mid+1,high,l,r);
        
        return min(res_l,res_r);
    }
    
    void update(int idx,int low,int high,int i,int val)
    {
        if(low==high)
        {
            seg[idx]=val;
            return;
        }
        
        int mid=(low+high)>>1;
        if(i<=mid) update(2*idx+1,low,mid,i,val);
        else update(2*idx+2,mid+1,high,i,val);
        
        seg[idx]=min(seg[2*idx+1],seg[2*idx+2]);
    }
};

void solve()
{
    int n; cin>>n;
    int a[n];
    for(int i=0;i<n;i++) cin>>a[i];
    SGTree sg1(n);
    sg1.build(0,0,n-1,a);
    
    int m; cin>>m;
    int b[m];
    for(int i=0;i<m;i++) cin>>b[i];
    SGTree sg2(m);
    sg2.build(0,0,m-1,a);
    
    int q; cin>>q;
    while(q--)
    {
        int type; cin>>type;
        if(type==1)
        {
            int l1,r1,l2,r2; cin>>l1>>r1>>l2>>r2;
            int res1=sg1.find(0,0,n-1,l1,r1);
            int res2=sg2.find(0,0,m-1,l2,r2);
            cout<<min(res1,res2)<<'\n';
        }
        else
        {
            int arr_no,i,val; cin>>arr_no>>i>>val;
            if(arr_no==1)
            {
                a[i]=val;
                sg1.update(0,0,n-1,i,val);
            }
            else
            {
                b[i]=val;
                sg2.update(0,0,m-1,i,val);
            }
        }
    }
    
    return;
}

int main()
{
    fastio();
    int t=1;
    // cin>>t;
    while(t--) solve();

    return 0;
}