#include <bits/stdc++.h>
using namespace std;
#define fastio()                      \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL);
#define lli long long int
#define ll long long
#define pii pair<int,int>

/*
test case to test:

6
1 3 2 0 4 5
8
1 0 3
1 0 5
2 3 9
1 2 4
2 3 2
1 0 5
2 0 0
1 0 2

*/

int INF=1e9+1000;

void build(int idx,int low,int high,int seg[],int a[])
{
    if(low==high)
    {
        seg[idx]=a[low];
        return;
    }
    
    int mid=(low+high)>>1;
    build(2*idx+1,low,mid,seg,a);
    build(2*idx+2,mid+1,high,seg,a);
    
    seg[idx]=min(seg[2*idx+1],seg[2*idx+2]);
}

int find(int idx,int low,int high,int l,int r,int seg[])
{
    if(r<low || high<l) return INF;
    else if(l<=low && high<=r) return seg[idx];
    
    int mid=(low+high)>>1;
    int res_l=find(2*idx+1,low,mid,l,r,seg);
    int res_r=find(2*idx+2,mid+1,high,l,r,seg);
    
    return min(res_l,res_r);
}

void update(int idx,int low,int high,int i,int val,int seg[])
{
    if(low==high)
    {
        seg[idx]=val;
        return;
    }
    
    int mid=(low+high)>>1;
    if(i<=mid) update(2*idx+1,low,mid,i,val,seg);
    else update(2*idx+2,mid+1,high,i,val,seg);
    
    seg[idx]=min(seg[2*idx+1],seg[2*idx+2]);
}

void solve()
{
    int n; cin>>n;
    int a[n];
    for(int i=0;i<n;i++) cin>>a[i];
    
    int M=4*n+10;
    int seg[M];
    build(0,0,n-1,seg,a);
    
    int q; cin>>q;
    while(q--)
    {
        int type; cin>>type;
        if(type==1)
        {
            int l,r; cin>>l>>r;
            cout<<find(0,0,n-1,l,r,seg)<<'\n';
        }
        else
        {
            int i,val; cin>>i>>val;
            a[i]=val;
            update(0,0,n-1,i,val,seg);
        }
    }
    
    return;
}

int main()
{
    fastio();
    int t=1;
    // cin>>t;
    while(t--) solve();

    return 0;
}