#include <bits/stdc++.h>
using namespace std;
#define fastio()                      \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL);
#define lli long long int
#define ll long long
#define pii pair<int,int>
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<ll>
#define vvl vector<vl> 

/*
test case to test:

5
10 7 88 1 13
7
3 3 
3 4
0 3
0 4
2 3
1 3
0 0

source: cp algos
https://cp-algorithms.com/data_structures/sparse-table.html#range-sum-queries
*/


class Sprs {
    const static int INF=1e9+1000;
    const static int init_val=-INF; // might need change
    static int f(int x,int y) {
        return max(x,y);
    } // might need change
    
    vector<vector<int>> dp;
    vector<int> log_b2;
    int n,m;
    
    public:
    
    Sprs(vector<int> v) {
        n=v.size();
        m=log2(n)+1;
        
        dp.resize(n, vector<int>(m,0));
        log_b2.resize(n+1);
        
        // precompute logs
        log_b2[1]=0;
        for(int i=2;i<=n;i++) log_b2[i]=log_b2[i/2]+1;
        
        // base case
        for(int i=0;i<n;i++) dp[i][0]=v[i]; 
        
        // build the sparse table
        for(int j=1;j<=m;j++) 
        for(int i=0;(i+(1<<j)-1)<n;i++) 
        dp[i][j]=f(dp[i][j-1],dp[i+(1<<(j-1))][j-1]);
    }
    
    // range min/max, gcd, tc=o(1) because we precomputed log
    int query_1(int l,int r) {
        // assuming 0<=l,r<n
        if(l>r) swap(l,r); // l <= r needed
        int ans=init_val;
        
        int power=log_b2[r-l+1];
        ans=f(dp[l][power],dp[r-(1<<power)+1][power]);
        
        return ans;
    } 
    
    // sum, tc=o(logn), because while loop runs for log2(r-l+1)
    int query_2(int l,int r) {
        // assuming 0<=l,r<n
        if(l>r) swap(l,r); // l <= r needed
        int ans=init_val;
        while(r-l+1>0) {
            int power=log_b2[r-l+1];
            r-=(1<<power);
            ans=f(ans,dp[r+1][power]);
        }
        
        return ans;
    }
};

void solve()
{
    int n; cin>>n;
    vector<int> v(n);
    for(int i=0;i<n;i++) {
        cin>>v[i];
    }
    
    Sprs sprs(n,v);
    
    int q; cin>>q;
    while(q--) {
        int l,r; cin>>l>>r;
        cout<<sprs.query(l,r)<<'\n';
    }
    
    return;
}

int main()
{
    fastio();
    int t=1;
    // cin>>t;
    while(t--) solve();

    return 0;
}
