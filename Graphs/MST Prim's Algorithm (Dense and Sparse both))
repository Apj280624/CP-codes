#include <bits/stdc++.h>
using namespace std;
#define fastio()                      \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL);
#define lli long long int
#define ll long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define tpiii tuple<int,int,int>
#define tplll tuple<ll,ll,ll>
// DS
#define vi vector<int>
#define vb vector<bool>
#define vl vector<ll>
#define vvi vector<vi>
#define vvl vector<vl> 
#define umap unordered_map
#define uset unordered_set
#define mset multiset
// Utilities
#define ff first
#define ss second
#define bg begin()
#define ed end()
#define pb push_back
#define ppb pop_back
ll mod1=1e9+7;
ll mod2=1e9+7;
// Functions
ll mod_add(ll x,ll y,ll m) { return ((x%m)+(y%m))%m; }
ll mod_mul(ll x,ll y,ll m) { return ((x%m)*(y%m))%m; }

/*
Prim's algorithm: Greedy
Tested on CSES problem set: Road reparation
https://cses.fi/problemset/task/1675/
Algorithm: 
-> We have two types of nodes, selected in MST and not selected in MST

-> As MST has n-1 edges only, for n-1 times:
   Out of all unselected edges we selected the edge u-v, such that u 
   already lies in the MST and v doesnot lie in the MST and the edge weight w is minimal possible
  
-> we will look at this algorithm from a different angle:  
   for every not yet selected vertex we will store the minimum edge to an 
   already selected vertex.
   
-> we will implement the same logic using two different approaches

FOR CURRENT POINT OF TIME:
mst[i] = true, if node 'i' is present in the mst ie selected
{dist[i], par[i]} = they both combined represent the minimal-distance edge
that can be used to add node 'i' in the MST: i ---- dist[i] ---- par[i] in 
the future

so out of all the edges coming from the currently selected nodes towards the node 'i'
the {dist[i], par[i]} represent the edge with the minimum weight at this point of time
dist[i] represents that minimum weight and
par[i] represent the node from which that minimum-weighted edge is coming to 'i'

Approach 1: suitable for Dense graphs, t = O(V^2)

-> As MST has n-1 edges only, for n-1 times:
we try to update edges coming from selected nodes to the unselected nodes
{dist[i], par[i]} combinedly represent the edges

-> select the current node to be added to MST: 
Out of all the unselected nodes we select a node 'v' and the edge weight 'w' 
is minimal possible If no such 'v' is found then it means the graph is 
disconnected and the MST doesnot exist
-> then add 'v' in MST

-> update using edges coming from newly the selected node v:
for all unselected neighbours of 'v', we try to improve their best edge ie
update dist and par, if w < dist


Approach 2: suitable for Sparse graphs as E is small, t = O(ElogV)
-> make a set which contains {dist, unselected nodes}

-> for n-1 times, select the node (v) with the minimum dist, erase it from set
-> improve the distance for the unselected neighbours of v, and if improvement occurs
erase the previous instance and add the improved instance

*/

const int INF = 1e9+100;

ll Prim_sparse(int n, vector<pii> adj[]) {
    vector<bool> mst(n);
    vector<int> par(n);
    vector<int> dist(n, INF);

    set<pii> set; 
    dist[0] = 0;
    set.insert({dist[0], 0});

    for(int counter=1; counter<n; counter++) {
        if(set.empty()) {
            return -1;
        }

        int sel_node = (*set.begin()).second;
        int sel_dist = (*set.begin()).first;

        mst[sel_node] = true;
        set.erase(set.begin());

        for(auto it: adj[sel_node]) {
            int v = it.first;
            int w = it.second;

            if(!mst[v] && w<dist[v]) {
                if(set.find({dist[v], v}) != set.end()) {
                    set.erase({dist[v], v});
                }

                par[v] = sel_node;
                dist[v] = w;
                set.insert({dist[v], v});
            }
        }
    }

    ll ans = 0;
    for(int node=1; node<n; node++) {
        ans += dist[node];
    }

    // cout << "u" << "      " << "v" << "  " << "d" << endl;
    // for(int node=1; node<n; node++) {
    //     cout << node << " ---- " << par[node] << ": " << dist[node] << endl; 
    // }

    return ans;
}

ll Prim_dense(int n, vector<pii> adj[]) {
    vector<bool> mst(n);
    vector<int> par(n);
    vector<int> dist(n, INF);

    dist[0] = 0;
    
    for(int counter=1; counter<n; counter++) {
        int sel_node = -1;
        int sel_dist = INF;

        for(int node=0; node<n; node++) {
            if(!mst[node] && dist[node]<sel_dist) {
                sel_node = node;
                sel_dist = dist[node];
            }
        }

        if(sel_node == -1) {
            return -1;
        }

        mst[sel_node] = true;

        for(auto it: adj[sel_node]) {
            if(!mst[it.first] && it.second<dist[it.first]) {
                par[it.first] = sel_node;
                dist[it.first] = it.second;
            }
        }
    }

    ll ans = 0;
    for(int node=1; node<n; node++) {
        ans += dist[node];
    }

    // cout << "u" << "      " << "v" << "  " << "d" << endl;
    // for(int node=1; node<n; node++) {
    //     cout << node << " ---- " << par[node] << ": " << dist[node] << endl; 
    // }

    return ans;
}

void solve() {
    int n, m; 
    cin >> n >> m;

    vector<pii> adj[n];
    for(int i=0; i<m; i++) {
        int u, v, w; 
        cin >> u >> v >> w;
        u--; v--;

        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
    }

    ll ans = Prim_sparse(n, adj);
    ll ans = Prim_dense(n, adj);

    if(ans == -1) {
        cout << "IMPOSSIBLE" << '\n';
        return;
    }

    cout << ans << '\n';

    return;
}
   
int main() {
    fastio();
    int t=1;
    //cin>>t;
    while(t--) solve();

    return 0;
}
